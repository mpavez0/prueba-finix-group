// <auto-generated />
using System;
using GestorFacturas.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestorFacturas.Infrastructure.Migrations
{
    [DbContext(typeof(InvoiceDbContext))]
    [Migration("20250405024242_InvoiceDBMigration")]
    partial class InvoiceDBMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("GestorFacturas.Domain.Entities.CreditNote", b =>
                {
                    b.Property<int>("CreditNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "credit_note_id");

                    b.Property<int>("CreditNoteAmount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "credit_note_amount");

                    b.Property<string>("CreditNoteDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "credit_note_date");

                    b.Property<int>("CreditNoteNumber")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "credit_note_number");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "invoice_number");

                    b.HasKey("CreditNoteId");

                    b.HasIndex("InvoiceNumber");

                    b.ToTable("InvoiceCreditNotes");

                    b.HasAnnotation("Relational:JsonPropertyName", "invoice_credit_note");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_id");

                    b.Property<string>("CustomerEmail")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_email");

                    b.Property<string>("CustomerName")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_name");

                    b.Property<string>("CustomerRun")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_run");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasAnnotation("Relational:JsonPropertyName", "customer");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "invoice_number");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "customer_id");

                    b.Property<int>("DaysToDue")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "days_to_due");

                    b.Property<string>("InvoiceDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "invoice_date");

                    b.Property<string>("InvoiceStatus")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "invoice_status");

                    b.Property<string>("PaymentDueDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "payment_due_date");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "payment_status");

                    b.Property<bool>("Rejected")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "rejected");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "total_amount");

                    b.HasKey("InvoiceNumber");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices");

                    b.HasAnnotation("Relational:JsonPropertyName", "invoice");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.InvoiceDetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "detail_id");

                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "invoice_number");

                    b.Property<string>("ProductName")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "product_name");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "quantity");

                    b.Property<int>("Subtotal")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "subtotal");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "unit_price");

                    b.HasKey("DetailId");

                    b.HasIndex("InvoiceNumber");

                    b.ToTable("InvoiceDetails");

                    b.HasAnnotation("Relational:JsonPropertyName", "invoice_detail");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.InvoicePayment", b =>
                {
                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "invoice_number");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "payment_date");

                    b.Property<string>("PaymentMethod")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "payment_method");

                    b.HasKey("InvoiceNumber");

                    b.ToTable("InvoicePayments");

                    b.HasAnnotation("Relational:JsonPropertyName", "invoice_payment");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.CreditNote", b =>
                {
                    b.HasOne("GestorFacturas.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceCreditNotes")
                        .HasForeignKey("InvoiceNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("GestorFacturas.Domain.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.InvoiceDetail", b =>
                {
                    b.HasOne("GestorFacturas.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.InvoicePayment", b =>
                {
                    b.HasOne("GestorFacturas.Domain.Entities.Invoice", "Invoice")
                        .WithOne("InvoicePayment")
                        .HasForeignKey("GestorFacturas.Domain.Entities.InvoicePayment", "InvoiceNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceCreditNotes");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("InvoicePayment");
                });
#pragma warning restore 612, 618
        }
    }
}
