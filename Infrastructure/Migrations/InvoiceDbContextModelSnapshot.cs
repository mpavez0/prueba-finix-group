// <auto-generated />
using System;
using GestorFacturas.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GestorFacturas.Infrastructure.Migrations
{
    [DbContext(typeof(InvoiceDbContext))]
    partial class InvoiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.14");

            modelBuilder.Entity("GestorFacturas.Domain.Entities.Customer", b =>
                {
                    b.Property<string>("CustomerRun")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerRun");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerRun")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DaysToDue")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("InvoiceStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PaymentDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("INTEGER");

                    b.HasKey("InvoiceNumber");

                    b.HasIndex("CustomerRun");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.InvoiceCreditNote", b =>
                {
                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreditNoteAmount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreditNoteDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("CreditNoteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CreditNoteNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("InvoiceNumber");

                    b.ToTable("InvoiceCreditNotes");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.InvoiceDetail", b =>
                {
                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DetailId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Subtotal")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UnitPrice")
                        .HasColumnType("INTEGER");

                    b.HasKey("InvoiceNumber");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.InvoicePayment", b =>
                {
                    b.Property<int>("InvoiceNumber")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("InvoiceNumber");

                    b.ToTable("InvoicePayments");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("GestorFacturas.Domain.Entities.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerRun")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.InvoiceCreditNote", b =>
                {
                    b.HasOne("GestorFacturas.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceCreditNotes")
                        .HasForeignKey("InvoiceNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.InvoiceDetail", b =>
                {
                    b.HasOne("GestorFacturas.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.InvoicePayment", b =>
                {
                    b.HasOne("GestorFacturas.Domain.Entities.Invoice", "Invoice")
                        .WithOne("InvoicePayment")
                        .HasForeignKey("GestorFacturas.Domain.Entities.InvoicePayment", "InvoiceNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("GestorFacturas.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceCreditNotes");

                    b.Navigation("InvoiceDetails");

                    b.Navigation("InvoicePayment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
